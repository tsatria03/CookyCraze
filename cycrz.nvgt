#pragma document docks
#pragma embed "data/assets.crz"
#include"includes/includes.nvgt"
array<bool> autobakeSlotEnabled;
array<bool> baking_slots;
bool hungerwarn=false, hungerdeath=false, slotDistribution=false;
int autobakeSlots = 0;
int lastHungerWarningLevel = -1;
bool bakesfx=true, coinsfx=true, ingame=false, eventsfx=true, exitsfx=true, introsfx=true, logosfx=true, savesfx=true, ranksfx=true, playervents=true, playervents2=true, playerprofed=false, orderedSyms=false, slotmode=false;
bool[] autoEventToggles(autoBakingEvents.length(), true);
bool[] manualEventToggles(manualBakingEvents.length(), true);
double autocooky=0, cookymod=5, difmod=10, coins=10, cookies=0, cookiesrequiered=10, cookyspeed=0, hunger=0, maxhunger=1000, levcoins=0, manulcooky=0, rank=1, usercoins=0;
double autoCookyBaseCost = 10, autoCookyMultiplier = 10, autoCookySpeedBaseCost = 20, autoCookySpeedMultiplier = 20, manualCookyBaseCost = 5, manualCookyMultiplier = 5, maxHungerBaseCost = 15, maxHungerMultiplier = 15, automationBaseCost = 30, slotBaseCost = 60, automationMultiplier = 1.1, slotMultiplier = 1.2;
double ambvolume=0, ambpitch=100, foodvolume=0, musvolume=0, muspitch=100, storambvolume=0, storambpitch=100, stormusvolume=0, stormuspitch=100;
int ambslot, alertslot, coinslot, eventslot, foodslot, gameslot, heartslot, hungerslot=-1, menuslot, mustrackslot, machineslot, percslot, storslot, storambslot, stortrackslot;
int evchanse=50, evchanse2=50, playergender=0;
int bakemode=0,  clicktime=1000-cookyspeed;
int ambienceIndex=0, musicIndex=0;
string[] autoBakingEvents = {"fire_spark", "bonus_cookies", "extra_hunger", "decrease_hunger", "increase_cookyspeed", "decrease_cookyspeed", "gain_coins", "lose_coins", "gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky"};
string[] manualBakingEvents = {"fire_spark", "bonus_cookies", "extra_hunger", "decrease_hunger", "increase_cookyspeed", "decrease_cookyspeed", "gain_coins", "lose_coins", "gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky"};
string ambtype="room1";
string mustype="music1";
string playername, playername2;
string currentSaveSlot = DIRECTORY_APPDATA + "tsatria03/CookyCraze/saves/game1.crz";
string version="2.8beta";
timer clicktimer;
file dockfile, logfile;
audio_form form;
instance gamstence("cycrz");
menu m;
savedata sd("", "rQP8u9I5iWYwcmwPkJ5EzU3ri4r6IQFP77dvgYedgyGQPxzHEi1eKGdBEENLRbYEWBr3hAmmQLgyevhYJJ7Q3sUQt5n6BKjzYVZMWQb2LyYx");
savedata st(DIRECTORY_APPDATA + "tsatria03/CookyCraze/preffs/gamesets.crz", "fCZxssmzxaef1nwF3CklVrGJEx96KXTVO3Nl0Y6aOWaGJDCJAFYy7oQmuxbscvh68TCMruG51OUzkJqlj1ks3uIRHHiCL8ySi21R2");
savedata st2(DIRECTORY_APPDATA + "tsatria03/CookyCraze/preffs/soundsets.crz", "wiGXPI9eAoXhF7dSihNsf2Z6YPl19so1mjxdtghFAQvfXu3pJd8B6cw3Zyz2BrfCLkrVQbSVYYZqvrOiPbRZWhuci6U337dMkA5dLhGr6Qn604j9kCS9kiW2");
savedata st3(DIRECTORY_APPDATA + "tsatria03/CookyCraze/preffs/usersets.crz", "V3doOU8o3Wa5JSYSSALUxVEOxy3BgDkkEpo0eymhurTablmQ3buB73iyhYWH8inUToEIokhyDw957cxvGzEHyp3ZbbFjDToNCbCRbEcg4zzX8jYCFn2Ve3tK");
sound_pool p, pool, ambpool, hungerpool, muspool, storambpool, stormuspool;
virtual_dialogs vd;
void main()
{
if (@touchManager == null)
{
@touchManager = touch_gesture_manager();
}
set_sound_storage("*");
set_sound_decryption_key("BRn2x3BJd3O0KrB7kb2L6cY4qJYEjVt5OhuVzJmmsoj9wampZL3IAx7IdIQBMyqW7ssXZhsXwD2nrQR4qRL8038swNq0Zc2ObN6mNlWrjIGcYLqEh2t0OHeM",true);
show_game_window("CookyCraze, version "+version);
if(gamstence.is_already_running)
{
alert("error", "You can only have one instence of this game running!");
exit();
}
else
{
create_buffer("critical");
create_buffer("events");
create_buffer("general");
create_buffer("misc");
create_buffer("ranks");
readdata();
readpreffs();
readpreffs2();
readpreffs3();
if(logosfx==true) dlgplay("logo"+random(1,2)+".ogg");
if(playerprofed == false)
{
wait(500);
input_form f("game registration");
f.add_text_field("first_name", "What would you like your character's first name to be?", "", true, false, " ");
f.add_text_field("last_name", "What would you like your character's last name to be?", "", true, false, " ");
f.add_choice_field("gender", "What would you like your character's gender to be?", {"male", "female", "non binary"});
f.description = "Welcome to Cookie Craze! Please complete the following profile setup to personalize your game experience. Youâ€™ll be asked to provide basic information, which will be used to create your player profile. Answer each question to get started on your cookie-baking journey! Please press enter to continue the profile setup.";
dictionary@ result = f.run();
if(f.user_canceled)
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
string first_name = dgets(result, "first_name");
string last_name = dgets(result, "last_name");
string gender = dgets(result, "gender");
playername = first_name;
playername2 = last_name;
if (gender == "male")
{
playergender = 0;
}
else if (gender == "female")
{
playergender = 1;
}
else if (gender == "non binary")
{
playergender = 2;
}
setupmenu(false);
m.add_item("yes");
m.add_item("no");
m.intro_text="Alright, let's confirm your profile info. Your character's first name is " + first_name + ". Your character's last name is " + last_name + ". Your character's gender is " + gender + ". Is this information correct?";
int mres=m.run();
if(mres==-1)
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
if (mres==0)
{
dlg("Congratulations! You've successfully completed your profile setup. I'll give you 10 coins to get you started on your way. Press enter or space to continue.");
usercoins=10;
coins=usercoins;
dlgplay("coin1.ogg");
if (playergender == 0) 
{
dlg("Nice to meat you, Mr. " + playername2 + ". Or should I be proper and call you " + playername + "? Ha ha, just kidding. Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
} 
else if (playergender == 1) 
{
dlg("Nice to meat you, Ms. " + playername2 + ". Or should I be proper and call you " + playername + "? Ha ha, just kidding. Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
} 
else if (playergender == 2) 
{
dlg("Nice to meat you, " + playername + " " + playername2 + "! Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
}
playerprofed = true;
writepreffs3();
ingame=false;
mainmenu();
}
else
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
}
else if(playerprofed == true)
{
wait(500);
ingame=false;
mainmenu();
}
}
}

void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}
void resetgame()
{
autocooky=0;
coins=10;
cookies=0;
cookyspeed=0;
hunger=0;
maxhunger=1000;
levcoins=0;
manulcooky=0;
rank=1;
bakemode=0;
clicktime=1000-cookyspeed;
automationBaseCost=30;
slotBaseCost=60;
baking_slots.resize(1);
baking_slots[0] = true;
autobakeSlotEnabled.resize(1);
autobakeSlotEnabled[0] = false;
if (baking_slots.length() == 0)
    {
baking_slots.insert_last(true);
autobakeSlotEnabled.insert_last(false);
}
cookiesrequiered = (cookymod * (rank * (rank * difmod)));
}
