#include"includes/includes.nvgt"
array<bool> autobakeSlotEnabled;
array<bool> baking_slots;
bool hungerwarn=true, hungerdeath=true, slotDistribution = false;
int autobakeSlots = 0;
int lastHungerWarningLevel = -1;
bool bakesfx=true, coinsfx=true, ingame=false, eventsfx=true, exitsfx=true, introsfx=true, logosfx=true, savesfx=true, ranksfx=true, playervents=true, playervents2=true, playerprofed=false, orderedSyms=false, slotmode=false;
bool[] autoEventToggles(autoBakingEvents.length(), true);
bool[] manualEventToggles(manualBakingEvents.length(), true);
double autocooky=0, cookymod=5, difmod=10, coins=10, cookies=0, cookiesrequiered=10, cookyspeed=0, hunger=0, maxhunger=1000, levcoins=0, manulcooky=0, rank=1, usercoins=0;
double autoCookyBaseCost = 10, autoCookyMultiplier = 10, autoCookySpeedBaseCost = 20, autoCookySpeedMultiplier = 20, manualCookyBaseCost = 5, manualCookyMultiplier = 5, maxHungerBaseCost = 15, maxHungerMultiplier = 15, automationBaseCost = 30, slotBaseCost = 60, automationMultiplier = 1.1, slotMultiplier = 1.2;
double ambvolume=0, ambpitch=100, foodvolume=0, musvolume=0, muspitch=100, storambvolume=0, storambpitch=100, stormusvolume=0, stormuspitch=100;
int ambslot, alertslot, coinslot, eventslot, foodslot, gameslot, heartslot, hungerslot=-1, menuslot, mustrackslot, machineslot, percslot, storslot, storambslot, stortrackslot;
int evchanse=50, evchanse2=50, playergender=0;
int bakemode=0,  clicktime=1000-cookyspeed;
int ambienceIndex=0, musicIndex=0;
string[] autoBakingEvents = {"fire_spark", "bonus_cookies", "extra_hunger", "decrease_hunger", "increase_cookyspeed", "decrease_cookyspeed", "gain_coins", "lose_coins", "gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky"};
string[] manualBakingEvents = {"fire_spark", "bonus_cookies", "extra_hunger", "decrease_hunger", "increase_cookyspeed", "decrease_cookyspeed", "gain_coins", "lose_coins", "gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky"};
string ambtype="room1";
string mustype="music1";
string projname="releases/windows/CookyCraze_password_is_CrazeMastery";
string repo_dir="C:/Users/tsatr/OneDrive/Documents/GitHub/CookyCraze";
string playername, playername2;
string currentSaveSlot = "data/saves/game1.crz";
string version="2.7";
timer clicktimer;
file dockfile, logfile;
audio_form form;
instance gamstence("cycrz");
menu m;
savedata sd("", "rQP8u9I5iWYwcmwPkJ5EzU3ri4r6IQFP77dvgYedgyGQPxzHEi1eKGdBEENLRbYEWBr3hAmmQLgyevhYJJ7Q3sUQt5n6BKjzYVZMWQb2LyYx");
savedata st("data/preffs/gamesets.crz", "fCZxssmzxaef1nwF3CklVrGJEx96KXTVO3Nl0Y6aOWaGJDCJAFYy7oQmuxbscvh68TCMruG51OUzkJqlj1ks3uIRHHiCL8ySi21R2");
savedata st2("data/preffs/soundsets.crz", "wiGXPI9eAoXhF7dSihNsf2Z6YPl19so1mjxdtghFAQvfXu3pJd8B6cw3Zyz2BrfCLkrVQbSVYYZqvrOiPbRZWhuci6U337dMkA5dLhGr6Qn604j9kCS9kiW2");
savedata st3("data/preffs/usersets.crz", "V3doOU8o3Wa5JSYSSALUxVEOxy3BgDkkEpo0eymhurTablmQ3buB73iyhYWH8inUToEIokhyDw957cxvGzEHyp3ZbbFjDToNCbCRbEcg4zzX8jYCFn2Ve3tK");
sound_pool p, pool, ambpool, hungerpool, muspool, storambpool, stormuspool;
virtual_dialogs vd;
void main()
{
if (@touchManager == null)
{
@touchManager = touch_gesture_manager();
}
set_sound_storage("data/preffs/assets.crz");
set_sound_decryption_key("BRn2x3BJd3O0KrB7kb2L6cY4qJYEjVt5OhuVzJmmsoj9wampZL3IAx7IdIQBMyqW7ssXZhsXwD2nrQR4qRL8038swNq0Zc2ObN6mNlWrjIGcYLqEh2t0OHeM",true);
show_game_window("CookyCraze, version "+version);
if(gamstence.is_already_running)
{
alert("error", "You can only have one instence of this game running!");
exit();
}
else
{
create_buffer("critical");
create_buffer("events");
create_buffer("general");
create_buffer("misc");
create_buffer("ranks");
readdata();
readpreffs();
readpreffs2();
readpreffs3();
if(logosfx==true) dlgplay("logo"+random(1,2)+".ogg");
if(playerprofed == false)
{
wait(500);
input_form f("game registration");
f.add_text_field("first_name", "What would you like your character's first name to be?", "", true, false, " ");
f.add_text_field("last_name", "What would you like your character's last name to be?", "", true, false, " ");
f.add_choice_field("gender", "What would you like your character's gender to be?", {"male", "female", "non binary"});
f.description = "Welcome to Cookie Craze! Please complete the following profile setup to personalize your game experience. Youâ€™ll be asked to provide basic information, which will be used to create your player profile. Answer each question to get started on your cookie-baking journey! Please press enter to continue the profile setup.";
dictionary@ result = f.run();
if(f.user_canceled)
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
string first_name = dgets(result, "first_name");
string last_name = dgets(result, "last_name");
string gender = dgets(result, "gender");
playername = first_name;
playername2 = last_name;
if (gender == "male")
{
playergender = 0;
}
else if (gender == "female")
{
playergender = 1;
}
else if (gender == "non binary")
{
playergender = 2;
}
setupmenu(false);
m.add_item("yes");
m.add_item("no");
m.intro_text="Alright, let's confirm your profile info. Your character's first name is " + first_name + ". Your character's last name is " + last_name + ". Your character's gender is " + gender + ". Is this information correct?";
int mres=m.run();
if(mres==-1)
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
if (mres==0)
{
dlg("Congratulations! You've successfully completed your profile setup. I'll give you 10 coins to get you started on your way. Press enter or space to continue.");
usercoins=10;
coins=usercoins;
dlgplay("coin1.ogg");
if (playergender == 0) 
{
dlg("Nice to meat you, Mr. " + playername2 + ". Or should I be proper and call you " + playername + "? Ha ha, just kidding. Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
} 
else if (playergender == 1) 
{
dlg("Nice to meat you, Ms. " + playername2 + ". Or should I be proper and call you " + playername + "? Ha ha, just kidding. Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
} 
else if (playergender == 2) 
{
dlg("Nice to meat you, " + playername + " " + playername2 + "! Now go have fun baking cookies and reaching new ranks! Press enter or space to continue.");
}
playerprofed = true;
writepreffs3();
ingame=false;
mainmenu();
}
else
{
alert("Profile setup unsuccessful", "Profile setup is needed to start your cookie-baking adventure. Please complete your profile to begin playing!");
exit();
}
}
else if(playerprofed == true)
{
wait(500);
ingame=false;
mainmenu();
}
}
}

void dockread(const string&in filename)
{
if(!file_exists(filename))
{
alert("Error","Could not fined "+string_replace(filename, "docks/", "", true));
docksmenu();
}
dockfile.open(filename,"rb");
string docktext=dockfile.read();
dockfile.close();
form.reset();
form.create_window("Viewing "+string_replace(filename, "docks/", "", true),false,false,false);
int dockbox=form.create_input_box(string_replace(filename, "docks/", "", true), docktext, read_only:true, multiline:true);
int dockclose=form.create_button("&close",false,true);
form.focus(dockbox);
while(true)
{
wait(5);
form.monitor();
if (form.is_pressed(dockclose))
{
docksmenu();
}
}
}

void main_game_input()
{
buffercheck();
touchManager.monitor();
if(control_is_down())
{
if(key_pressed(KEY_S))
{
writedata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game saved", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
game();
}
if(key_pressed(KEY_L))
{
readdata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game reloaded", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
game();
}
}
if(key_pressed(KEY_M))
{
pool.destroy_sound(coinslot);
if(coins>0) coinslot=pool.play_stationary("cointoss.ogg", false);
speak_buffer("You have "+format_number(coins)+" coins available to spend", "misc");
}
if(key_pressed(KEY_R))
{
speak_buffer("You're currently rank "+format_number(rank)+" with "+format_number(cookies)+" cookies. Your next rank requires "+(format_number(cookiesrequiered-cookies))+" cookies.", "misc");
}
if (key_pressed(KEY_F))
{
    int slotCount = 0;
    for (uint i = 0; i < autobakeSlotEnabled.length(); i++)
    {
        if (autobakeSlotEnabled[i])
            slotCount++;
    }
    if (slotCount == 0)
    {
        speak_buffer("You don't have any automated slots enabled yet.", "misc");
    }
    else
    {
        double cookiesPerSlot;
        double totalCookies;
        if (slotDistribution)
        {
            cookiesPerSlot = autocooky;
            totalCookies = autocooky / slotCount;
        }
        else
        {
            cookiesPerSlot = autocooky;
            totalCookies = autocooky * slotCount;
        }
        if (clicktime == 1000)
        {
            speak_buffer("You produce " + format_number(cookiesPerSlot) + " cookies per second. With " + slotCount + " automated slots, you produce " + format_number(totalCookies) + " cookies per second.", "misc");
        }
        else
        {
            speak_buffer("You produce " + format_number(cookiesPerSlot) + " cookies every " + clicktime + " milliseconds. With " + slotCount + " automated slots, you produce " + format_number(totalCookies) + " cookies every " + clicktime + " milliseconds.", "misc");
        }
    }
}
if(key_pressed(KEY_C))
{
if(cookies>=0)
{
speak_buffer("You baked a total of "+format_number(cookies)+" cookies.", "misc");
}
else if(cookies>=1)
{
speak_buffer("You baked a total of"+cookies+"cooky.", "misc");
}
else if(cookies>=2)
{
speak_buffer("You baked a total of"+cookies+"cookies.", "misc");
}
}
if(key_pressed(KEY_H))
{
if(hunger<=maxhunger/4)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
if(hunger>=maxhunger/4 and hunger<=maxhunger/2)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart2.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
if(hunger>=maxhunger/2 or hunger<=maxhunger)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart3.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
}
if(key_pressed(KEY_J))
{
if(manulcooky<1)
{
speak_buffer("You  produce "+format_number(manulcooky)+" cookies per press.", "misc");
}
else if(manulcooky==1)
{
speak_buffer("You  produce "+format_number(manulcooky)+" cooky per press.", "misc");
}
else if(manulcooky>=2)
{
speak_buffer("You  produce "+format_number(manulcooky)+" cookies per press.", "misc");
}
}
if(alt_is_down())
{
if(key_pressed(KEY_F4))
{
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
hungerpool.destroy_sound(hungerslot);
pool.destroy_all();
speak_buffer("Exiting the game without saving.");
if(exitsfx==false) wait(500);
if(exitsfx==true) dlgplay("exitgame.ogg");
mainmenu();
}
}
if(key_repeating(KEY_ESCAPE))
{
alertslot=pool.play_stationary("alert_critical.ogg",false);
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.destroy_sound(hungerslot);
    setupmenu(false);    
    m.add_item("Yes, quit the game without saving", "quit_no_save");
    m.add_item("Yes, save the game and then quit", "quit_save");
    m.add_item("No, continue playing", "continue");
    m.add_item("No, save the game, but continue playing", "save_continue");
m.intro_text = "Are you sure you want to quit the game?";
int mres = m.run();
    if(mres==-1)
    {
pool.destroy_sound(alertslot);
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
        speak_buffer("Continuing the game.", "misc");
form.reset();
ingame=true;
game();
    }
if (m.get_selected_item_id() == "quit_no_save")
    {
pool.destroy_sound(alertslot);
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
pool.destroy_all();
        speak_buffer("Exiting the game without saving.");
if(exitsfx==false) wait(500);
if(exitsfx==true) dlgplay("exitgame.ogg");
ingame=false;
mainmenu();
    }
if (m.get_selected_item_id() == "quit_save")
    {
        writedata();
pool.destroy_sound(alertslot);
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
pool.destroy_all();
        speak_buffer("game saved, Exiting to main menu.");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ingame=false;
mainmenu();
    }
if (m.get_selected_item_id() == "continue")
    {
pool.destroy_sound(alertslot);
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
        speak_buffer("Continuing the game.", "misc");
form.reset();
ingame=true;
game();
    }
if (m.get_selected_item_id() == "save_continue")
    {
        writedata();
pool.destroy_sound(alertslot);
        speak_buffer("game saved, Continuing the game.", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
form.reset();
ingame=true;
game();
    }
}
}

void game()
{
form.reset();
form.create_window("CookyCraze", false);
int manulbake=form.create_button("Bake cook&ies");
int shop=form.create_button("Cooky &store");
int food=form.create_button("Ea&t cookies");
int autobake=form.create_button("Enter baking m&ode");
    int manageSlots = form.create_button("Manage auto baking s&lots");
int minigames=form.create_button("mini &games");
int preffs=form.create_button("&preferences");
form.focus(manulbake);
while(true)
{
wait(5);
form.monitor();
main_game_input();
if(hungerdeath==true) deathcheck();
if(hungerwarn==true) hungercheck();
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(hunger<=0)
{
hunger=0;
}
if(hunger>=maxhunger)
{
hunger=maxhunger;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
        if (form.is_pressed(manageSlots))
        {
manage_baking_slots();
        }
if (form.is_pressed(minigames))
{
mingamsmenu();
}
if (form.is_pressed(preffs))
{
preffsmenu();
}
if(form.is_pressed(autobake))
{
if(autocooky<1)
{
speak_buffer("You need at least 1 auto cooky to enable baking mode.", "general");
}
else if(autocooky>=1)
{
if(bakemode==0)
{
bakemode=1;
pool.play_stationary("toggleon.ogg", false);
speak_buffer("Baking mode enabled.", "misc");
}
else if(bakemode==1)
{
bakemode=0;
pool.play_stationary("toggleoff.ogg", false);
speak_buffer("Baking mode disabled.", "misc");
}
}
}
if(form.is_pressed(manulbake))
{
if(manulcooky<1)
{
speak_buffer("You need at least 1 manule cooky to start baking cookies.", "general");
}
else if(manulcooky>=1)
{
cookies+=1*manulcooky;
pool.play_stationary("manulbake.ogg", false);
if(playervents2==true) attempt_manebaker_event(evchanse2);
}
}
if(form.is_pressed(shop))
{
if(coins<1)
{
speak_buffer("You need at least 1 coin to enter the cooky store.", "general");
}
else if(coins>=1)
{
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
hungerpool.destroy_sound(hungerslot);
speak_buffer("You're now entering the cooky store.", "critical");
dlgplay("store_door_open.ogg");
alertslot=pool.play_stationary("store_welcome.ogg",false);
storambslot=storambpool.play_stationary_extended("store_amb.ogg",true,0,0,storambvolume,storambpitch,false);
stortrackslot=stormuspool.play_stationary_extended("store_music.ogg",true,0,0,stormusvolume,stormuspitch,false);
shopmenu();
}
}
if (form.is_pressed(food))
{
    if (cookies > 0)
{
        double cookiesToEat = min(10 * rank, cookies);
pool.destroy_sound(foodslot);
        foodslot = pool.play_stationary("chip"+random(1,3)+".ogg", false);
        cookies -= cookiesToEat;
          hunger = max(0, hunger - cookiesToEat);
        if (hunger <= 0)
{
            pool.destroy_sound(foodslot);
            pool.destroy_sound(eventslot);
            if (playergender == 0) eventslot = pool.play_stationary("male_vomit.ogg", false);
            if (playergender == 1) eventslot = pool.play_stationary("female_vomit.ogg", false);
speak_buffer("You ate too much! You feel sick, and now lost " + format_number(cookiesToEat) + " cookies as a penalty.", "critical");
            hunger = 0;
        }
    } else if (cookies <= 0)
{
        speak_buffer("There aren't enough cookies for you to eat.", "general");
    }
}
if(bakemode==1 and autocooky>=1  and autobakeSlots > 0)
{
if(clicktimer.elapsed>=clicktime)
{
double perSlot = autocooky;
if (slotDistribution && autobakeSlots > 0)
{
    perSlot = autocooky / autobakeSlots;
}
        for (uint i = 0; i < autobakeSlotEnabled.length(); i++)
{       
            if (autobakeSlotEnabled[i])
{
cookies += perSlot;
}
}
if(bakesfx==true) pool.play_stationary("autobake.ogg", false);
if(playervents==true) attempt_autobaker_event(evchanse);
clicktimer.restart();
}
else if(bakemode==1 and autocooky<=0)
{
bakemode=0;
pool.destroy_all();
}
}
if (cookies >= cookiesrequiered)
{
hunger+= 10 * rank;
    levcoins+=10 * rank;
    rank+=1;
    coins += levcoins;
    cookiesrequiered = (cookymod * (rank * (rank * difmod)));
    if (levcoins >= 1 && levcoins <= 49)
{
        if(coinsfx==true) pool.play_stationary("coin1.ogg", false);
    }
else if (levcoins >= 50 && levcoins <= 999)
{
        if(coinsfx==true) pool.play_stationary("coin50.ogg", false);
    }
else if (levcoins >= 1000 && levcoins <= 9999)
{
        if(coinsfx==true) pool.play_stationary("coin1000.ogg", false);
    }
else if (levcoins >= 10000 && levcoins <= 49999)
{
        if(coinsfx==true) pool.play_stationary("coin10000.ogg", false);
    }
else if (levcoins >= 50000 && levcoins <= 99999)
{
        if(coinsfx==true) pool.play_stationary("coin50000.ogg", false);
    }
else if (levcoins >= 100000 && levcoins <= 999999)
{
        if(coinsfx==true) pool.play_stationary("coin100000.ogg", false);
    }
else if (levcoins >= 1000000)
{
        if(coinsfx==true) pool.play_stationary("coin100000.ogg", false);
    }
    if(ranksfx==true) pool.play_stationary("achievement" + random(1, 2) + ".ogg", false);
    speak_buffer("Congratulations! You've successfully made it to rank " + format_number(rank) + "! You've earned " + format_number(levcoins) + " coins for your achievement. Great work!", "ranks");
if(rank==10)
{
levcoins += 10 * rank*2;
if(coinsfx==true) pool.play_stationary("alert_large.ogg", false);
dlg_buffer("Congratulations "+playername+"! You've successfully unlocked the coin flipper minni game. You've also earned an extra "+format_number(levcoins)+" coins for your hard work. Keep it up!", "ranks");
}
if(rank==20)
{
levcoins += 10 * rank*4;
if(coinsfx==true) pool.play_stationary("alert_large.ogg", false);
dlg_buffer("Congratulations "+playername+"! You've successfully unlocked the slot machine minni game. You've also earned an extra "+format_number(levcoins)+" coins for your hard work. Keep it up!", "ranks");
}
}
}
}
void resetgame()
{
autocooky=0;
coins=10;
cookies=0;
cookyspeed=0;
hunger=0;
maxhunger=1000;
levcoins=0;
manulcooky=0;
rank=1;
bakemode=0;
clicktime=1000-cookyspeed;
automationBaseCost=30;
slotBaseCost=60;
baking_slots.resize(1);
baking_slots[0] = true;
autobakeSlotEnabled.resize(1);
autobakeSlotEnabled[0] = false;
if (baking_slots.length() == 0)
    {
baking_slots.insert_last(true);
autobakeSlotEnabled.insert_last(false);
}
cookiesrequiered = (cookymod * (rank * (rank * difmod)));
}
void release_game()
{
    string[] game_files = {"data/preffs/assets.crz", "data/saves/game1.crz", "data/preffs/gamesets.crz", "data/preffs/soundsets.crz", "data/preffs/usersets.crz", "docks/changelog.txt", "docks/credits.txt", "docks/readme.txt", "docks/soundslist.txt", "docks/todo_list.txt"};
    string[] missing_files;
    if (!directory_exists("releases/windows"))
    {
        alert("Error", "The 'releases/windows' directory does not exist. Cannot proceed with file copying.");
        mainmenu();
    }
    if (!directory_exists(projname)) directory_create(projname);
    if (!directory_exists(projname + "/data/preffs")) directory_create(projname + "/data/preffs");
if (!directory_exists(projname + "/data/saves")) directory_create(projname + "/data/saves");
    if (!directory_exists(projname + "/docks")) directory_create(projname + "/docks");
    for (uint i = 0; i < game_files.length(); i++)
    {
        string current_file = game_files[i];
        string repo_file = repo_dir + "/" + current_file;
        string dest = "";
        if (current_file == "data/preffs/assets.crz" || current_file == "data/saves/game1.crz" || current_file == "data/preffs/gamesets.crz" || current_file == "data/preffs/soundsets.crz" || current_file == "data/preffs/usersets.crz")
        {
            dest = projname + "/data/" + current_file.split("/")[1];
        }
        else if (current_file == "docks/changelog.txt" || current_file == "docks/credits.txt" || current_file == "docks/readme.txt" || current_file == "docks/soundslist.txt" || current_file == "docks/todo_list.txt")
        {
            dest = projname + "/docks/" + current_file.split("/")[1];
        }
        if (file_exists(repo_file))
        {
            file_copy(repo_file, dest, true);
        }
        else
        {
            missing_files.insert_last(current_file);
        }
    }
    string compiled_game_file = repo_dir + "/cycrz.exe";
    if (file_exists(compiled_game_file))
    {
        string game_dest = projname + "/cycrz.exe";
        file_copy(compiled_game_file, game_dest, true);
    }
    else
    {
        missing_files.insert_last("cycrz.exe");
    }    
    if (missing_files.length() > 0)
    {
        string missfiles = "";
        for (uint i2 = 0; i2 < missing_files.length(); i2++)
        {
            missfiles += missing_files[i2] + "\r\n";
        }
        clipboard_copy_text(missfiles);
        alert("Error", "The following files are missing: " + missfiles + ". They have been copied to your clipboard.");
    }
    alert("Success!", (game_files.length() - missing_files.length()) + " out of " + game_files.length() + " files were copied to the " + projname + " folder." + (missing_files.length() > 0 ? " " + missing_files.length() + " could not be copied." : ""));
if(file_exists(repo_dir+"/cycrz.exe")) file_delete(repo_dir+"/cycrz.exe");
    mainmenu();
}

