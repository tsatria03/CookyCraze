void mainmenu()
{
setupmenu();
m.add_item("documentation menu", "dm");
m.add_item("game menu", "gm");
m.add_item("settings menu", "sm");
m.add_item("exit game", "ex");
m.intro_text = "Main menu. Please choose an option with your arrow keys, then press enter to activate one.";
int mres=m.run();
string main = m.get_selected_item_id();
if(mres==-1)
{
speak("exiting");
m.fade_music();
exit();
}
if(main=="dm")
{
docksmenu();
}
if (main == "gm")
{
gamemenu();
}
if (main == "sm")
{
speak("loading");
m.fade_music();
preffsmenu();
}
if (main == "ex")
{
speak("exiting");
m.fade_music();
exit();
}
}
void docksmenu()
{
setupmenu();
m.add_item("changelog", "changelog");
m.add_item("credits", "credits");
m.add_item("readme", "readme");
if(!SCRIPT_COMPILED) m.add_item("todo_list", "todo_list");
m.add_item("back", "back");
m.intro_text="Documentation menu.";
int mres=m.run();
string dnm=m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if(dnm=="changelog")
{
speak("loading");
m.fade_music();
dockread("docks/changelog.txt");
}
if(dnm=="credits")
{
speak("loading");
m.fade_music();
dockread("docks/credits.txt");
}
if(dnm=="readme")
{
speak("loading");
m.fade_music();
dockread("docks/readme.txt");
}
if(dnm=="todo_list")
{
speak("loading");
m.fade_music();
dockread("docks/todo_list.txt");
}
if(dnm=="back")
{
mainmenu();
}
}
void gamemenu()
{
setupmenu();
m.add_item("load game", "lg");
m.add_item("new game", "ng");
m.add_item("back", "back");
m.intro_text = "Game menu.";
int mres=m.run();
string gamem = m.get_selected_item_id();
if(mres==-1)
{
mainmenu();
}
if (gamem == "lg")
{
loadgamemenu();
}
if(gamem=="ng")
{
newgamemenu();
}
if (gamem == "back")
{
mainmenu();
}
}
void loadgamemenu()
{
setupmenu();
for (uint i = 1; i <= 20; i++) 
{
        string saveFile = DIRECTORY_APPDATA + "tsatria03/CookyCraze/saves/game" + string(i) + ".crz";
        double rank = get_save_rank(saveFile);
        if (rank == -1)
        {
            m.add_item("Slot " + string(i) + ". Empty.", "sl" + string(i));
        }
        else
        {
            m.add_item("Slot " + string(i) + ". Highest rank: " + string(format_number(rank)), "sl" + string(i));
        }
    }
m.add_item("Back", "back");
m.intro_text = "Select the save slot to load the game from.";
int mres = m.run();
string slotem = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if (slotem == "back")
{
gamemenu();
}
int slotNumber = string_to_int(slotem.substr(2));
set_save_slot(slotNumber);
if (file_exists(currentSaveSlot))
{
speak("Loading slot " + string(slotNumber));
m.fade_music();
if(introsfx==true) pool.play_stationary("welcome" + random(1, 3) + ".ogg", false);        
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
ingame=true;
readdata();
clickergame();
}
else
{
m.fade_music();
alertslot=pool.play_stationary("error.ogg",false);
dlg("Error! The data assosiated with this save slot does not exist!");
pool.destroy_sound(alertslot);
ingame=false;
gamemenu();
}
}
void newgamemenu()
{
setupmenu();
for (uint i = 1; i <= 20; i++) 
{
        string saveFile = DIRECTORY_APPDATA + "tsatria03/CookyCraze/saves/game" + string(i) + ".crz";
        double rank = get_save_rank(saveFile);
        if (rank == -1)
        {
            m.add_item("Slot " + string(i) + ". Empty.", "sl" + string(i));
        }
        else
        {
            m.add_item("Slot " + string(i) + ". Highest rank: " + string(format_number(rank)), "sl" + string(i));
        }
    }
m.add_item("Back", "back");
m.intro_text = "Select the save slot to start the game from.";
int mres = m.run();
string slotem2 = m.get_selected_item_id();
if(mres==-1)
{
gamemenu();
}
if (slotem2 == "back")
{
gamemenu();
}
int slotNumber = string_to_int(slotem2.substr(2));
set_save_slot(slotNumber);
if (file_exists(currentSaveSlot))
{
setupmenu();
m.add_item("yes");
m.add_item("no");
m.intro_text = "Are you sure you want to start over from the beginning? This will erase all progress on the selected save slot.";
int mres2=m.run();
if(mres2==-1)
{
ingame=false;
newgamemenu();
}
if(mres2==0)
{
speak("Loading slot " + string(slotNumber));
m.fade_music();
if(introsfx==true) pool.play_stationary("welcome" + random(1, 3) + ".ogg", false);        
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
ingame=true;
resetgame();
clickergame();
}
if (mres2==1)
{
ingame=false;
newgamemenu();
}
}
else
{
speak("Loading slot " + string(slotNumber));
m.fade_music();
if(introsfx==true) pool.play_stationary("welcome" + random(1, 3) + ".ogg", false);        
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
ingame=true;
resetgame();
clickergame();
}
}
void mingamsmenu()
{
form.reset();
form.create_window("Mini games", false);
int flip=form.create_button("Play &coin flipper");
int slots=form.create_button("play &slot machine");
form.focus(flip);
while(true)
{
wait(5);
form.monitor();
        if (key_pressed(KEY_ESCAPE))
        {
form.reset();
clickergame();
}
if(form.is_pressed(slots))
{
if(rank<20)
{
gameslot=pool.play_stationary("gamefail.ogg", false);
dlg_buffer("Sorry "+playername+". This minni game is locked. Please be at rank 20 or higher to play this.", "critical");
form.reset();
mingamsmenu();
}
else if(rank>=20)
{
gameslot=pool.play_stationary("gamelaunch.ogg", false);
slotsgame();
}
}
if(form.is_pressed(flip))
{
if(rank<10)
{
gameslot=pool.play_stationary("gamefail.ogg", false);
dlg_buffer("Sorry "+playername+". This minni game is locked. Please be at rank 10 or higher to play this.", "critical");
form.reset();
mingamsmenu();
}
else if(rank>=10)
{
gameslot=pool.play_stationary("gamelaunch.ogg", false);
coingame();
}
}
}
}
void shopmenu()
{
setupmenu2();
m.add_item("buy upgrades", "bmu");
m.add_item("sell cookies. You currently have"+format_number(cookies)+" cookies. Description: Each cooky is sold for 100 coins.", "slm");
m.add_item("back", "back");
m.intro_text="Welcome to the cooky store. What would you like to do?";
int mres=m.run();
string stm=m.get_selected_item_id();
if(mres==-1)
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
storambpool.destroy_sound(storambslot);
stormuspool.destroy_sound(stortrackslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clickergame();
}
if(stm=="bmu")
{
buymenu();
}
if(stm=="slm")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string sailam=vd.input_box("","How many cookies would you like to sell? Press enter to sell the maximum amount.", string(round(cookies,0)));
double cookiesToSell = string_to_number(sailam);
    if (cookiesToSell <= 0)
    {
        pool.destroy_sound(alertslot);
        pool.play_stationary("sellfail.ogg", false);
        dlg("Error! Please enter a valid number of cookies to sell!");
        shopmenu();
    }
    else if (cookiesToSell > cookies)
    {
        pool.destroy_sound(alertslot);
        pool.play_stationary("sellfail.ogg", false);
        dlg("Error! You only have " + format_number(cookies) + " cookies available to sell!");
        shopmenu();
    }
double totalCoinsEarned = cookiesToSell * 100;
cookies -= cookiesToSell;
coins += totalCoinsEarned;
if (totalCoinsEarned >= 10 && totalCoinsEarned <= 490)
{
pool.play_stationary("coin1.ogg", false);
}
else if (totalCoinsEarned >= 500 && totalCoinsEarned <= 9990)
{
pool.play_stationary("coin50.ogg", false);
}
else if (totalCoinsEarned >= 10000 && totalCoinsEarned <= 99990)
{
pool.play_stationary("coin1000.ogg", false);
}
else if (totalCoinsEarned >= 100000 && totalCoinsEarned <= 499990)
{
pool.play_stationary("coin10000.ogg", false);
}
else if (totalCoinsEarned >= 500000 && totalCoinsEarned <= 999990)
{
pool.play_stationary("coin50000.ogg", false);
}
else if (totalCoinsEarned >= 1000000 && totalCoinsEarned <= 9999990)
{
pool.play_stationary("coin100000.ogg", false);
}
else if (totalCoinsEarned >= 10000000)
{
pool.play_stationary("coin100000.ogg", false);
}
dlg("Successfully sold " + format_number(cookiesToSell) + " cookies for " + format_number(totalCoinsEarned) + " coins!");
shopmenu();
}
if(stm=="back")
{
pool.destroy_sound(alertslot);
pool.destroy_sound(storslot);
storambpool.destroy_sound(storambslot);
stormuspool.destroy_sound(stortrackslot);
speak("You're now exiting the cooky store.");
dlgplay("store_door_close.ogg");
ambpool.destroy_sound(ambslot);
muspool.destroy_sound(mustrackslot);
ambslot=ambpool.play_stationary_extended(ambtype+".ogg", true,0,0,ambvolume,ambpitch,false);
mustrackslot=muspool.play_stationary_extended(mustype+".ogg", true,0,0,musvolume,muspitch,false);
form.reset();
clickergame();
}
}
void buymenu()
{
setupmenu2();
m.add_item("automatic baking items", "abi");
m.add_item("manule baking items", "mabi");
m.add_item("back", "back");
m.intro_text="Upgrades menu. Please choose a cattigory to purchis.";
int mres=m.run();
string stm=m.get_selected_item_id();
if(mres==-1)
{
shopmenu();
}
if(stm=="abi")
{
abimenu();
}
if(stm=="mabi")
{
mabimenu();
}
if(stm=="back")
{
shopmenu();
}
}
void abimenu()
{
setupmenu2();
double autoCookyCost = buy_item(autocooky, autoCookyBaseCost, autoCookyMultiplier);
double autoCookySpeedCost = buy_item(cookyspeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
double maxBuyableAutoCooky = 0;
double tempCoins = coins;
while (tempCoins >= buy_item(autocooky + maxBuyableAutoCooky, autoCookyBaseCost, autoCookyMultiplier))
{
tempCoins -= buy_item(autocooky + maxBuyableAutoCooky, autoCookyBaseCost, autoCookyMultiplier);
maxBuyableAutoCooky++;
}
double maxBuyableAutoCookySpeed = 0;
tempCoins = coins;
while (tempCoins >= buy_item(cookyspeed + maxBuyableAutoCookySpeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier))
{
tempCoins -= buy_item(cookyspeed + maxBuyableAutoCookySpeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
maxBuyableAutoCookySpeed++;
}
m.add_item("Auto cooky, costs " + format_number(autoCookyCost) + " coins. You can buy " + format_number(maxBuyableAutoCooky) + ". Description: Each purchase gives you 1 auto cookie to bake with.", "abic");
m.add_item("Auto cooky speed, costs " + format_number(autoCookySpeedCost) + " coins. You can buy " + format_number(maxBuyableAutoCookySpeed) + ". Description: Each purchase increases your baking speed by 10 milliseconds, helping you bake cookies much faster.", "sabic");
m.add_item("back", "back");
m.intro_text="Automatic baking menu.";
int mres = m.run();
string abm = m.get_selected_item_id();
if (mres==-1)
{
buymenu();
}
if (abm == "abic")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string autocook = vd.input_box("","How many auto cookies would you like to buy? Press enter to buy the maximum amount.", string(round(maxBuyableAutoCooky,0)));
double quantity = string_to_number(autocook);
double totalCost = 0;
    if (quantity <= 0)
    {
        pool.destroy_sound(alertslot);
        pool.play_stationary("storefail.ogg", false);
        dlg("Error! Please enter a valid number of auto cookies to buy!");
        buymenu();
    }
for (uint i = 0; i < quantity; i++)
{
totalCost += buy_item(autocooky + i, autoCookyBaseCost, autoCookyMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
autocooky += quantity;
double nextUpgradeCost = buy_item(autocooky, autoCookyBaseCost, autoCookyMultiplier);
pool.play_stationary("buy"+random(1,4)+".ogg",false);
pool.play_stationary("store_order.ogg",false);
dlg("Purchase successful! You bought " + format_number(quantity) + " auto cookies for " + format_number(totalCost) + " coins. Next upgrade will cost " + format_number(nextUpgradeCost) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + format_number(quantity) + " auto cookies!");
buymenu();
}
}
if (abm == "sabic")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string autocooksp = vd.input_box("","How many auto cookie speeds would you like to buy? Press enter to buy the maximum amount.", string(round(maxBuyableAutoCookySpeed,0)));
double quantity = string_to_number(autocooksp);
double totalCost = 0;
    if (quantity <= 0)
    {
        pool.destroy_sound(alertslot);
        pool.play_stationary("storefail.ogg", false);
        dlg("Error! Please enter a valid number of auto cooky speeds to buy!");
        buymenu();
    }
for (uint i = 0; i < quantity; i++)
{
totalCost += buy_item(cookyspeed + i, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
cookyspeed += quantity*10;
clicktime-=cookyspeed;
double nextUpgradeCost = buy_item(cookyspeed, autoCookySpeedBaseCost, autoCookySpeedMultiplier);
pool.play_stationary("buy"+random(1,4)+".ogg",false);
pool.play_stationary("store_order.ogg",false);
dlg("Purchase successful! You bought " + format_number(quantity) + " auto cooky speeds for " + format_number(totalCost) + " coins. Next upgrade will cost " + format_number(nextUpgradeCost) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + format_number(quantity) + " auto cooky speeds!");
buymenu();
}
}
if (abm == "back")
{
buymenu();
}
}
void mabimenu()
{
setupmenu2();
double manuleCookyCost = buy_item(manulcooky, manualCookyBaseCost, manualCookyMultiplier);
double maxBuyable = 0;
double tempCoins = coins;
while (tempCoins >= buy_item(manulcooky + maxBuyable, manualCookyBaseCost, manualCookyMultiplier))
{
tempCoins -= buy_item(manulcooky + maxBuyable, manualCookyBaseCost, manualCookyMultiplier);
maxBuyable++;
}
m.add_item("Manual cooky, costs " + format_number(manuleCookyCost) + " coins. " + "You can buy " + format_number(maxBuyable) + ". Description: Each purchase gives you 1 manual cookie to bake with.", "mabic");
m.add_item("back", "back");
m.intro_text="Manual baking menu.";
int mres = m.run();
string mabm = m.get_selected_item_id();
if (mres==-1)
{
buymenu();
}    
if (mabm == "mabic")
{
vd.set_disallowed_chars("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string manulcook = vd.input_box("","How many manule cookies would you like to buy? Press enter to buy the maximum amount.", string(round(maxBuyable,0)));
double quantity = string_to_number(manulcook);
double totalCost = 0;
    if (quantity <= 0)
    {
        pool.destroy_sound(alertslot);
        pool.play_stationary("storefail.ogg", false);
        dlg("Error! Please enter a valid number of manual cookies to buy!");
        buymenu();
    }
for (uint i = 0; i < quantity; i++)
{
totalCost += buy_item(manulcooky + i, manualCookyBaseCost, manualCookyMultiplier);
}
if (coins >= totalCost)
{
coins -= totalCost;
manulcooky += quantity;
double nextUpgradeCost = buy_item(manulcooky, manualCookyBaseCost, manualCookyMultiplier);
pool.play_stationary("buy"+random(1,4)+".ogg",false);
pool.play_stationary("store_order.ogg",false);
dlg("Purchase successful! You bought " + format_number(quantity) + " manual cookies for " + format_number(totalCost) + " coins. Next upgrade will cost " + format_number(nextUpgradeCost) + " coins.");
buymenu();
}
else
{
pool.play_stationary("storefail.ogg",false);
dlg("Error! You don't have enough coins to buy " + format_number(quantity) + " manule cookies!");
buymenu();
}
}
if (mabm == "back")
{
buymenu();
}
}
void preffsmenu()
{
form.reset();
    form.create_window("preferences", false);
    int audsets = form.create_button("&audio settings");
int gamsets = form.create_button("&game settings");
int usersets = form .create_button("&user settings");
form.focus(audsets);
    while (true)
    {
        form.monitor();
        wait(5);
        if (form.is_pressed(gamsets))
        {
gamsetsmenu();
}
        if (form.is_pressed(audsets))
        {
soundsetsmenu();
}
        if (form.is_pressed(usersets))
        {
usersetsmenu();
}
        if (key_pressed(KEY_ESCAPE))
        {
if(ingame==true)
{
form.reset();
clickergame();
}
else if(ingame==false)
{
mainmenu();
}
    }
}
}
void gamsetsmenu()
{
    form.reset();
    form.create_window("Game Settings", false);
int introSFX = form.create_checkbox("Enable playing the intro sound upon starting the game.", introsfx);
int logoSFX = form.create_checkbox("Enable playing the logo sound upon launching the game.", logosfx);
int exitSFX = form.create_checkbox("Enable playing the exit sound upon exiting the game.", exitsfx);
int bakeSFX = form.create_checkbox("Enable auto bake sound effects when baking cookies.", bakesfx);
int coinSFX = form.create_checkbox("Enable coin sound effects when earning money.", coinsfx);
int eventSFX = form.create_checkbox("Enable event sound effects when events trigger.", eventsfx);
int rankSFX = form.create_checkbox("Enable rank sound effects when leveling up.", ranksfx);
int saveSFX = form.create_checkbox("Enable save sound effects when reloading and saving the game.", savesfx);
int playvents = form.create_checkbox("Enable player events during auto baking.", playervents);
int playvents2 = form.create_checkbox("Enable player events during manual baking.", playervents2);
int ordsyms = form.create_checkbox("Enable alphabetical symbol listing for the slot machine mini game.", orderedSyms);
int reelspin = form.create_checkbox("Enable automatic stopping of reels for the slot machine mini game.", slotmode);
int bakeSplitToggle = form.create_checkbox("Enable evenly distributing cookie production across automated slots.", slotDistribution);
int automationMultiplierSlider = form.create_slider("Automation slot Cost Multiplier.", (automationMultiplier - 1.0) * 100, 1, 100, "X", 1);
int slotMultiplierSlider = form.create_slider("Slot production Cost Multiplier.", (slotMultiplier - 1.0) * 100, 1, 100, "X", 1);
    int autoCookyBaseCostSlider = form.create_slider("Auto Cooky Base Cost.", autoCookyBaseCost, 1, 100, "coins", 1);
    int autoCookyMultiplierSlider = form.create_slider("Auto Cooky Cost Multiplier.", autoCookyMultiplier, 1, 100, "X", 1);
    int autoCookySpeedBaseCostSlider = form.create_slider("Auto Cooky Speed Base Cost.", autoCookySpeedBaseCost, 1, 100, "coins", 1);
    int autoCookySpeedMultiplierSlider = form.create_slider("Auto Cooky Speed Cost Multiplier.", autoCookySpeedMultiplier, 1, 100, "X", 1);
    int manualCookyBaseCostSlider = form.create_slider("Manual Cooky Base Cost.", manualCookyBaseCost, 1, 100, "coins", 1);
    int manualCookyMultiplierSlider = form.create_slider("Manual Cooky Cost Multiplier.", manualCookyMultiplier, 1, 100, "X", 1);
int cookieRankModifierSlider = form.create_slider("Cookie Rank Modifier.", cookymod, 1, 100, "x", 1);
int difficultyRankModifierSlider = form.create_slider("Difficulty rank Modifier.", difmod, 1, 100, "x", 1);
int autoChanceSlider = form.create_slider("Auto-Baking Event chance.", 100 - evchanse, 1, 100, "percent", 1);
int manualChanceSlider = form.create_slider("Manual-Baking Event chance.", 100 - evchanse2, 1, 100, "percent", 1);
    int autoEventList = form.create_list("Auto-Baking Events", autoBakingEvents.length(), true, false);
    for (uint i = 0; i < autoBakingEvents.length(); i++) {
        form.add_list_item(autoEventList, autoBakingEvents[i], autoBakingEvents[i], -1, autoEventToggles[i]);
    }
    int manualEventList = form.create_list("Manual-Baking Events", manualBakingEvents.length(), true, false);
    for (uint i = 0; i < manualBakingEvents.length(); i++) {
        form.add_list_item(manualEventList, manualBakingEvents[i], manualBakingEvents[i], -1, manualEventToggles[i]);
    }
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(introSFX);
    while (true)
    {
        wait(5);
        form.monitor();
automationMultiplier = 1.0 + (form.get_slider(automationMultiplierSlider) * 0.01);
slotMultiplier = 1.0 + (form.get_slider(slotMultiplierSlider) * 0.01);
       autoCookyBaseCost = form.get_slider(autoCookyBaseCostSlider);
        autoCookyMultiplier = form.get_slider(autoCookyMultiplierSlider);
        autoCookySpeedBaseCost = form.get_slider(autoCookySpeedBaseCostSlider);
        autoCookySpeedMultiplier = form.get_slider(autoCookySpeedMultiplierSlider);
        manualCookyBaseCost = form.get_slider(manualCookyBaseCostSlider);
        manualCookyMultiplier = form.get_slider(manualCookyMultiplierSlider);
cookymod = form.get_slider(cookieRankModifierSlider);
difmod = form.get_slider(difficultyRankModifierSlider);
evchanse = 100 - form.get_slider(autoChanceSlider);
evchanse2 = 100 - form.get_slider(manualChanceSlider);
introsfx = form.is_checked(introSFX);
logosfx = form.is_checked(logoSFX);
exitsfx = form.is_checked(exitSFX);
bakesfx = form.is_checked(bakeSFX);
        coinsfx = form.is_checked(coinSFX);
eventsfx = form.is_checked(eventSFX);
        ranksfx = form.is_checked(rankSFX);
savesfx = form.is_checked(saveSFX);
slotDistribution = form.is_checked(bakeSplitToggle);
        playervents = form.is_checked(playvents);
        playervents2 = form.is_checked(playvents2);
orderedSyms = form.is_checked(ordsyms);
slotmode = form.is_checked(reelspin);
        if (form.is_pressed(savesets))
        {
            if (!validate_event_selection(autoEventList, manualEventList))
{
                dlgmessage_return("You must select at least one positive and one negative event for both Auto-Baking and Manual-Baking before saving.");
            form.reset();
            gamsetsmenu();
            }
else
{
writepreffs(autoEventList, manualEventList);
            dlgmessage_return("Settings saved.");
writedata();
readdata();
            preffsmenu();
        }
        }
if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
}
}
void soundsetsmenu()
{
form.reset();
    form.create_window("audio settings", false);
int amblist, musslist;
if(ingame==true) amblist = form.create_list("ambience sound:", 4);
if(ingame==true) musslist = form.create_list("music track:", 20);
    string[] ambOptions;
    for (uint i = 1; i <= 4; i++)
    {
        string ambName = "Room " + i;
        string ambID = "room" + i;
        ambOptions.insert_last(ambID);
        form.add_list_item(amblist, ambName, ambID);
    }
    string[] musOptions;
    for (uint i = 1; i <= 20; i++)
    {
        string musName = "Music " + i;
        string musID = "music" + i;
        musOptions.insert_last(musID);
        form.add_list_item(musslist, musName, musID);
    }
if(ingame==true) form.set_list_position(amblist, ambienceIndex);
if(ingame==true) form.set_list_position(musslist, musicIndex);
int gameAmbienceVolumeSlider = form.create_slider("game ambience volume, ", (ambvolume + 50) * 2, 0, 100, "percent", 1);
int gameMusicVolumeSlider = form.create_slider("game music volume, ", (musvolume + 50) * 2, 0, 100, "percent", 1);
int storeAmbienceVolumeSlider = form.create_slider("store ambience volume, ", (storambvolume + 50) * 2, 0, 100, "percent", 1);
int storeMusicVolumeSlider = form.create_slider("store music volume, ", (stormusvolume + 50) * 2, 0, 100, "percent", 1);
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(amblist);
    while (true)
    {
        wait(5);
        form.monitor();
ambvolume = (form.get_slider(gameAmbienceVolumeSlider) / 2) - 50;
musvolume = (form.get_slider(gameMusicVolumeSlider) / 2) - 50;
storambvolume = (form.get_slider(storeAmbienceVolumeSlider) / 2) - 50;
stormusvolume = (form.get_slider(storeMusicVolumeSlider) / 2) - 50;
        ambpool.update_sound_start_values(ambslot, 0, ambvolume, ambpitch);
        muspool.update_sound_start_values(mustrackslot, 0, musvolume, muspitch);
storambpool.update_sound_start_values(storambslot, 0, storambvolume, storambpitch);
stormuspool.update_sound_start_values(stortrackslot, 0, stormusvolume, stormuspitch);
if(ingame==true) ambienceIndex = form.get_list_position(amblist);
        if (ambienceIndex != -1 && ambOptions[ambienceIndex] != ambtype)
        {
            ambtype = ambOptions[ambienceIndex];
            ambpool.destroy_sound(ambslot);
            ambslot = ambpool.play_stationary_extended(ambtype + ".ogg", true, 0, 0, ambvolume, ambpitch, false);
        }
if(ingame==true) musicIndex = form.get_list_position(musslist);
        if (musicIndex != -1 && musOptions[musicIndex] != mustype)
        {
            mustype = musOptions[musicIndex];
            muspool.destroy_sound(mustrackslot);
            mustrackslot = muspool.play_stationary_extended(mustype + ".ogg", true, 0, 0, musvolume, muspitch, false);
        }
        if (form.is_pressed(savesets))
        {
writepreffs2();
dlgmessage_return("Settings saved.");
preffsmenu();
}
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
    }
}
void usersetsmenu()
{
    string gendertext;
    if (playergender == 0)
{
        gendertext = "Male";
    }
else if (playergender == 1)
{
        gendertext = "Female";
    }
else if (playergender == 2)
{
        gendertext = "Non-binary";
    }
else
{
        gendertext = "Unknown";
    }
    form.reset();
    form.create_window("User Settings", false);
    int charname = form.create_button("Change the character's &first name. Currently set to "+playername+".");
    int charname2 = form.create_button("Change the character's &last name. Currently set to "+playername2+".");
    int chargender = form.create_list("Change the character's &gender. Currently set to " + gendertext + ".", 3);
    form.add_list_item(chargender, "Male");
    form.add_list_item(chargender, "Female");
    form.add_list_item(chargender, "Non-binary");
    if (playergender >= 0 && playergender <= 2)
{
        form.set_list_position(chargender, playergender);
    }
int savesets = form.create_button("&save settings", true);
int cansets = form.create_button("&cancel");
form.focus(charname);
    while (true)
    {
        form.monitor();
        wait(5);
playergender = form.get_list_position(chargender);
        if (form.is_pressed(charname))
        {
vd.set_disallowed_chars(" !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string fn=vd.input_box("","Enter the first name of this character.");
if(fn.is_empty())
{
alertslot=pool.play_stationary("error.ogg",false);
dlg("Error! Your character's first name is invalid!");
pool.destroy_sound(alertslot);
            form.reset();
            usersetsmenu();
}
else
{
playername=fn;
            dlgmessage_return("Success! Your character's first name has now been changed to "+playername+".");
            form.reset();
            usersetsmenu();
}
}
        if (form.is_pressed(charname2))
        {
vd.set_disallowed_chars(" !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string fn2=vd.input_box("","Enter the last name of this character.");
if(fn2.is_empty())
{
pool.play_stationary("error.ogg",false);
dlg("Error! Your character's last name is invalid!");
pool.destroy_sound(alertslot);
            form.reset();
            usersetsmenu();
}
else
{
playername2=fn2;
            dlgmessage_return("Success! Your character's last name has now been changed to "+playername2+".");
            form.reset();
            usersetsmenu();
}
}
        if (form.is_pressed(savesets))
        {
            writepreffs3();
            dlgmessage_return("Settings saved.");
preffsmenu();
        }
        if (key_pressed(KEY_ESCAPE))
        {
preffsmenu();
}
            if (form.is_pressed(cansets))
        {
preffsmenu();
}
    }
}
