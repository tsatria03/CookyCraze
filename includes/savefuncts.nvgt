void readdata()
{
sd.load();
if(sd.d.exists("autocooky"))
{
autocooky=sd.read_double("autocooky");
}
if(sd.d.exists("coins"))
{
coins=sd.read_double("coins");
}
if(sd.d.exists("cookies"))
{
cookies=sd.read_double("cookies");
}
if(sd.d.exists("cookiesrequiered"))
{
cookiesrequiered=sd.read_double("cookiesrequiered");
}
if(sd.d.exists("cookyspeed"))
{
cookyspeed=sd.read_double("cookyspeed");
}
if(sd.d.exists("hunger"))
{
hunger=sd.read_double("hunger");
}
if(sd.d.exists("maxhunger"))
{
maxhunger=sd.read_double("maxhunger");
}
if(sd.d.exists("levcoins"))
{
levcoins=sd.read_double("levcoins");
}
if(sd.d.exists("manulcooky"))
{
manulcooky=sd.read_double("manulcooky");
}
if(sd.d.exists("rank"))
{
rank=sd.read_double("rank");
}
if (sd.d.exists("automationBaseCost"))
{
automationBaseCost = sd.read_double("automationBaseCost");
}
if (sd.d.exists("slotBaseCost"))
{
slotBaseCost = sd.read_double("slotBaseCost");
}
if(sd.d.exists("bakemode"))
{
bakemode=sd.read_int("bakemode");
}
if(sd.d.exists("clicktime"))
{
clicktime=sd.read_int("clicktime");
}
if (sd.d.exists("autobakeSlots"))
{
    autobakeSlots = sd.read_int("autobakeSlots");
    autobakeSlotEnabled.resize(autobakeSlots);
    for (uint i = 0; i < autobakeSlots; i++)
{
        string key = "autobakeSlotEnabled_" + string(i);
        if (sd.d.exists(key))
{
autobakeSlotEnabled[i] = sd.read_bool(key);
    }
}
}
if (sd.d.exists("baking_slot_count"))
{
    int count = sd.read_int("baking_slot_count");
    baking_slots.resize(count);
    autobakeSlotEnabled.resize(count);
    for (int i = 0; i < count; i++)
    {
        baking_slots[i] = true;
        string key = "autobakeSlotEnabled_" + string(i);
        if (sd.d.exists(key))
            autobakeSlotEnabled[i] = sd.read_bool(key);
        else
            autobakeSlotEnabled[i] = false;
    }
}
else
{
    baking_slots.resize(1);
    baking_slots[0] = true;
    autobakeSlotEnabled.resize(1);
    autobakeSlotEnabled[0] = false;
} 
readpreffs();
cookiesrequiered = (cookymod * (rank * (rank * difmod)));
}
void writedata()
{
sd.add("autocooky",autocooky);
sd.add("coins",coins);
sd.add("cookies",cookies);
st.add("cookiesrequiered",cookiesrequiered);
sd.add("cookyspeed",cookyspeed);
sd.add("hunger",hunger);
sd.add("maxhunger",maxhunger);
sd.add("levcoins",levcoins);
sd.add("manulcooky",manulcooky);
sd.add("rank",rank);
sd.add("automationBaseCost", automationBaseCost);
sd.add("slotBaseCost", slotBaseCost);
sd.add("bakemode",bakemode);
sd.add("clicktime",clicktime);
sd.add("autobakeSlots", autobakeSlots);
for (uint i = 0; i < autobakeSlotEnabled.length(); i++)
{
    sd.add("autobakeSlotEnabled_" + string(i), autobakeSlotEnabled[i]);
}
sd.add("baking_slot_count", baking_slots.length());
sd.save();
}
void readpreffs()
{
st.load();
if(st.d.exists("bakesfx"))
{
bakesfx=st.read_bool("bakesfx");
}
if(st.d.exists("coinsfx"))
{
coinsfx=st.read_bool("coinsfx");
}
if(st.d.exists("eventsfx"))
{
eventsfx=st.read_bool("eventsfx");
}
if(st.d.exists("exitsfx"))
{
exitsfx=st.read_bool("exitsfx");
}
if(st.d.exists("introsfx"))
{
introsfx=st.read_bool("introsfx");
}
if(st.d.exists("logosfx"))
{
logosfx=st.read_bool("logosfx");
}
if(st.d.exists("ranksfx"))
{
ranksfx=st.read_bool("ranksfx");
}
if(st.d.exists("savesfx"))
{
savesfx=st.read_bool("savesfx");
}
if (st.d.exists("hungerdeath"))
{
hungerdeath = st.read_bool("hungerdeath");
}
if (st.d.exists("hungerwarn"))
{
hungerwarn = st.read_bool("hungerwarn");
}
if (st.d.exists("slotDistribution"))
{
slotDistribution = st.read_bool("slotDistribution");
}
if(st.d.exists("playervents"))
{
playervents=st.read_bool("playervents");
}
if(st.d.exists("playervents2"))
{
playervents2=st.read_bool("playervents2");
}
if(st.d.exists("orderedSyms"))
{
orderedSyms=st.read_bool("orderedSyms");
}
if(st.d.exists("slotmode"))
{
slotmode=st.read_bool("slotmode");
}
if (st.d.exists("automationMultiplier"))
{
automationMultiplier = st.read_double("automationMultiplier");
}
if (st.d.exists("slotMultiplier"))
{
slotMultiplier = st.read_double("slotMultiplier");
}
if(st.d.exists("autoCookyBaseCost"))
{
autoCookyBaseCost=st.read_double("autoCookyBaseCost");
}
if(st.d.exists("autoCookyMultiplier"))
{
autoCookyMultiplier=st.read_double("autoCookyMultiplier");
}
if(st.d.exists("autoCookySpeedBaseCost"))
{
autoCookySpeedBaseCost=st.read_double("autoCookySpeedBaseCost");
}
if(st.d.exists("autoCookySpeedMultiplier"))
{
autoCookySpeedMultiplier=st.read_double("autoCookySpeedMultiplier");
}
if(st.d.exists("manualCookyBaseCost"))
{
manualCookyBaseCost=st.read_double("manualCookyBaseCost");
}
if(st.d.exists("manualCookyMultiplier"))
{
manualCookyMultiplier=st.read_double("manualCookyMultiplier");
}
if(st.d.exists("maxHungerBaseCost"))
{
maxHungerBaseCost=st.read_double("maxHungerBaseCost");
}
if(st.d.exists("maxHungerMultiplier"))
{
maxHungerMultiplier=st.read_double("maxHungerMultiplier");
}
if(st.d.exists("difmod"))
{
difmod=st.read_double("difmod");
}
if(st.d.exists("cookymod"))
{
cookymod=st.read_double("cookymod");
}
if(st.d.exists("evchanse"))
{
evchanse=st.read_int("evchanse");
}
if(st.d.exists("evchanse2"))
{
evchanse2=st.read_int("evchanse2");
}
    autoEventToggles.resize(autoBakingEvents.length());
    manualEventToggles.resize(manualBakingEvents.length());
    for (uint i = 0; i < autoBakingEvents.length(); i++)
{
        if (st.d.exists("autoEvent_" + autoBakingEvents[i]))
{
            autoEventToggles[i] = st.read_bool("autoEvent_" + autoBakingEvents[i]);
        }
    }
    for (uint i = 0; i < manualBakingEvents.length(); i++)
{
        if (st.d.exists("manualEvent_" + manualBakingEvents[i]))
{
            manualEventToggles[i] = st.read_bool("manualEvent_" + manualBakingEvents[i]);
        }
    }
}
void writepreffs(int autoEventList, int manualEventList)
{
st.add("bakesfx",bakesfx);
st.add("coinsfx",coinsfx);
st.add("eventsfx",eventsfx);
st.add("exitsfx",exitsfx);
st.add("introsfx",introsfx);
st.add("logosfx",logosfx);
st.add("ranksfx",ranksfx);
st.add("savesfx",savesfx);
st.add("hungerdeath",hungerdeath);
st.add("hungerwarn",hungerwarn);
st.add("slotDistribution",slotDistribution);
st.add("playervents",playervents);
st.add("playervents2",playervents2);
st.add("orderedSyms",orderedSyms);
st.add("slotmode",slotmode);
st.add("automationMultiplier", automationMultiplier);
st.add("slotMultiplier", slotMultiplier);
st.add("autoCookyBaseCost",autoCookyBaseCost);
st.add("autoCookyMultiplier",autoCookyMultiplier);
st.add("autoCookySpeedBaseCost",autoCookySpeedBaseCost);
st.add("autoCookySpeedMultiplier",autoCookySpeedMultiplier);
st.add("manualCookyBaseCost",manualCookyBaseCost);
st.add("manualCookyMultiplier",manualCookyMultiplier);
st.add("maxHungerBaseCost",maxHungerBaseCost);
st.add("maxHungerMultiplier",maxHungerMultiplier);
st.add("difmod",difmod);
st.add("cookymod",cookymod);
st.add("evchanse",evchanse);
st.add("evchanse2",evchanse2);
    autoEventToggles.resize(autoBakingEvents.length());
    manualEventToggles.resize(manualBakingEvents.length());
    for (uint i = 0; i < autoBakingEvents.length(); i++)
{
        autoEventToggles[i] = form.is_list_item_checked(autoEventList, i);
        st.add("autoEvent_" + autoBakingEvents[i], autoEventToggles[i]);
    }
    for (uint i = 0; i < manualBakingEvents.length(); i++)
{
        manualEventToggles[i] = form.is_list_item_checked(manualEventList, i);
        st.add("manualEvent_" + manualBakingEvents[i], manualEventToggles[i]);
    }
st.save();
}
void readpreffs2()
{
st2.load();
if(st2.d.exists("menumusvolume"))
{
menumusvolume=st2.read_double("menumusvolume");
}
if(st2.d.exists("ambvolume"))
{
ambvolume=st2.read_double("ambvolume");
}
if(st2.d.exists("musvolume"))
{
musvolume=st2.read_double("musvolume");
}
if(st2.d.exists("storambvolume"))
{
storambvolume=st2.read_double("storambvolume");
}
if(st2.d.exists("stormusvolume"))
{
stormusvolume=st2.read_double("stormusvolume");
}
if(st2.d.exists("ambienceIndex"))
{
ambienceIndex=st2.read_int("ambienceIndex");
}
if(st2.d.exists("musicIndex"))
{
musicIndex=st2.read_int("musicIndex");
}
if(st2.d.exists("ambtype"))
{
ambtype=st2.read_string("ambtype");
}
if(st2.d.exists("mustype"))
{
mustype=st2.read_string("mustype");
}
}
void writepreffs2()
{
st2.add("menumusvolume",menumusvolume);
st2.add("ambvolume",ambvolume);
st2.add("musvolume",musvolume);
st2.add("storambvolume",storambvolume);
st2.add("stormusvolume",stormusvolume);
st2.add("ambienceIndex",ambienceIndex);
st2.add("musicIndex",musicIndex);
st2.add("ambtype",ambtype);
st2.add("mustype",mustype);
st2.save();
}
void readpreffs3()
{
st3.load();
if(st3.d.exists("playerprofed"))
{
playerprofed=st3.read_bool("playerprofed");
}
if(st3.d.exists("playergender"))
{
playergender=st3.read_int("playergender");
}
if(st3.d.exists("playername"))
{
playername=st3.read_string("playername");
}
if(st3.d.exists("playername2"))
{
playername2=st3.read_string("playername2");
}
}
void writepreffs3()
{
st3.add("playerprofed",playerprofed);
st3.add("playergender",playergender);
st3.add("playername",playername);
st3.add("playername2",playername2);
st3.save();
}
