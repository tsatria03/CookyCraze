void coin_game_input()
{
buffercheck();
touchManager.monitor();
if(control_is_down())
{
if(key_pressed(KEY_S))
{
writedata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game saved", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
coingame();
}
if(key_pressed(KEY_L))
{
readdata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game reloaded", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
coingame();
}
}
if (key_pressed(KEY_C))
{
speak_buffer("You have " + format_number(cookies) + " cookies.");
}
        if (key_pressed(KEY_A))
{
speak_buffer("You have " + format_number(autocooky) + " auto cookies.");
}
        if (key_pressed(KEY_S))
{
speak_buffer("You have " + format_number(cookyspeed) + " auto cookie speeds.");
}
        if (key_pressed(KEY_M))
{
speak_buffer("You have " + format_number(manulcooky) + " manual cookies.");
}
        if (key_pressed(KEY_O))
{
pool.destroy_sound(coinslot);
if(coins>0) coinslot=pool.play_stationary("cointoss.ogg", false);
speak_buffer("You have " + format_number(coins) + " coins.");
}
if(key_pressed(KEY_H))
{
if(hunger<=maxhunger/4)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
if(hunger>=maxhunger/4 and hunger<=maxhunger/2)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart2.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
if(hunger>=maxhunger/2 or hunger<=maxhunger)
{
pool.destroy_sound(heartslot);
heartslot = pool.play_stationary("heart3.ogg", false);
speak_buffer("You are "+format_number(hunger/maxhunger*100)+"percent hungry. You can hold up to "+format_number(maxhunger)+" units of food.", "misc");
}
}
}

void coingame()
{
    form.reset();
    form.create_window("Coin flipper", false);
string[] coinFlipEvents = {"gain_autocooky", "lose_autocooky", "gain_manulcooky", "lose_manulcooky", "gain_cookies", "lose_cookies", "increase_hunger", "decrease_hunger", "gain_coins", "lose_coins", "increase_cookyspeed", "decrease_cookyspeed"};
    int coinEventList = form.create_list("Choose the &coin events to use:", coinFlipEvents.length(), true, false);
bool[] coinEventToggles(coinFlipEvents.length(), true);
    for (uint i = 0; i < coinFlipEvents.length(); i++)
{
        form.add_list_item(coinEventList, coinFlipEvents[i], coinFlipEvents[i], -1, coinEventToggles[i]);
    }
int flip = form.create_button("&Flip a coin", true);
    form.focus(coinEventList);
    while (true)
    {
        wait(5);
        form.monitor();
if(hungerdeath==true) deathcheck();
if(hungerwarn==true) hungercheck();
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(hunger<=0)
{
hunger=0;
}
if(hunger>=maxhunger)
{
hunger=maxhunger;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(form.get_current_focus()!=coinEventList)
{
coin_game_input();
}
        if (key_pressed(KEY_ESCAPE))
        {
pool.destroy_sound(gameslot);
            mingamsmenu();
        }
if (form.is_pressed(flip))
{
    if (coins >= 1)
    {
        string[] activeCoinEvents;
        string[] headsEvents;
        string[] tailsEvents;
        for (uint i = 0; i < coinFlipEvents.length(); i++)
        {
            if (form.is_list_item_checked(coinEventList, i))
            {
                activeCoinEvents.insert_last(coinFlipEvents[i]);
                if (coinFlipEvents[i].find("gain") >= 0 || coinFlipEvents[i] == "decrease_hunger" || coinFlipEvents[i] == "increase_cookyspeed")
                {
                    headsEvents.insert_last(coinFlipEvents[i]);
                }
                else if (coinFlipEvents[i].find("lose") >= 0 || coinFlipEvents[i] == "increase_hunger" || coinFlipEvents[i] == "decrease_cookyspeed")
                {
                    tailsEvents.insert_last(coinFlipEvents[i]);
                }
            }
        }
        if (headsEvents.length() == 0 || tailsEvents.length() == 0)
        {
            dlg_buffer("You must select at least one positive and one negative event before flipping the coin! Press enter or space to continue.");
            form.reset();
            coingame();
        }
        string[] coinsides = { "heads", "tails" };
        string side = coinsides[random(0, coinsides.length() - 1)];
        pool.destroy_sound(eventslot);
        pool.play_stationary("coinflip.ogg", false);
        dlg_buffer("You flip a coin. It lands on " + side);
        if (side == "heads" && headsEvents.length() > 0)
        {
            string event = headsEvents[random(0, headsEvents.length() - 1)];
            trigger_coin_event(event, activeCoinEvents);
            form.focus_silently(flip);
        }
        else if (side == "tails" && tailsEvents.length() > 0)
        {
            string event = tailsEvents[random(0, tailsEvents.length() - 1)];
            trigger_coin_event(event, activeCoinEvents);
            form.focus_silently(flip);
        }
    }
    else
    {
        dlg_buffer("You don't have a coin to flip! Press enter or space to continue.", "general");
        form.reset();
        coingame();
    }
}
}
}
void slots_game_input()
{
buffercheck();
touchManager.monitor();
if(control_is_down())
{
if(key_pressed(KEY_S))
{
writedata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game saved", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
slotsgame();
}
if(key_pressed(KEY_L))
{
readdata();
ambpool.pause_sound(ambslot);
muspool.pause_sound(mustrackslot);
hungerpool.pause_sound(hungerslot);
speak_buffer("game reloaded", "misc");
if(savesfx==false) wait(500);
if(savesfx==true) dlgplay("savegame.ogg");
ambpool.resume_sound(ambslot);
muspool.resume_sound(mustrackslot);
hungerpool.resume_sound(hungerslot);
form.reset();
slotsgame();
}
}
if (key_pressed(KEY_C))
{
speak_buffer("You have " + format_number(cookies) + " cookies.");
}
        if (key_pressed(KEY_A))
{
speak_buffer("You have " + format_number(autocooky) + " auto cookies.");
}
        if (key_pressed(KEY_S))
{
speak_buffer("You have " + format_number(cookyspeed) + " auto cookie speeds.");
}
        if (key_pressed(KEY_M))
{
speak_buffer("You have " + format_number(manulcooky) + " manual cookies.");
}
        if (key_pressed(KEY_O))
{
pool.destroy_sound(coinslot);
if(coins>0) coinslot=pool.play_stationary("cointoss.ogg", false);
speak_buffer("You have " + format_number(coins) + " coins.");
}
}

void slotsgame()
{
    form.reset();
    form.create_window("Slot Machine", false);
    int betChoice = form.create_list("Choose an &item to bet:", 5);
    form.add_list_item(betChoice, "Cookies");
    form.add_list_item(betChoice, "Coins");
    form.add_list_item(betChoice, "Auto Cookies");
    form.add_list_item(betChoice, "Auto Cookie Speeds");
    form.add_list_item(betChoice, "Manual Cookies");
string[] symbols;
if(orderedSyms==true)
{
symbols = {"apple", "banana", "bean", "bell", "bottel", "bronze", "car", "carot", "celery", "chain", "chime", "clover", "copper", "crate", "crown", "diamond", "flower", "gem", "glass", "gold", "grape", "heart", "iron", "leef", "metal", "nickle", "orange", "peach", "pebble", "pepper", "pees", "potato", "rack", "rock", "rose", "silver", "spade", "star", "stone", "tomato"};
}
if(orderedSyms==false)
{
symbols = {"bell", "chime", "heart", "pebble", "star", "clover", "diamond", "spade", "crown", "gem", "apple", "grape", "peach", "orange", "banana", "gold", "silver", "bronze", "iron", "copper", "crate", "stone", "nickle", "pepper", "tomato", "carot", "celery", "bean", "pees", "potato", "car", "glass", "bottel", "rack", "chain", "metal", "rock", "leef", "flower", "rose"};
}
    int symbolChoices = form.create_list("Choose the s&ymbols to use:", symbols.length(), true, false);
    bool[] symbolToggles(symbols.length(), true);
    for (uint i = 0; i < symbols.length(); i++)
{
        form.add_list_item(symbolChoices, symbols[i], symbols[i], -1, symbolToggles[i]);
    }
int betInput = form.create_input_box("Enter your b&et amount:", "", "", 0, false, false, false);
    int spinButton = form.create_button("Spin the &reels", true);
form.focus(betChoice);
form.set_disallowed_chars(betInput, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ !@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string reel1 = "", reel2 = "", reel3 = "", reel4 = "", reel5 = "";
    int selectedBet = 0;
    double betAmount = 0;
    while (true)
    {
        wait(5);
        form.monitor();
if(hungerdeath==true) deathcheck();
if(hungerwarn==true) hungercheck();
if(autocooky<=0)
{
bakemode=0;
autocooky=0;
}
if(coins<=0)
{
coins=0;
}
if(cookies<=0)
{
cookies=0;
}
if(cookyspeed<=0)
{
cookyspeed=0;
}
if(manulcooky<=0)
{
manulcooky=0;
}
if(clicktime<=50)
{
clicktime=50;
}
if(clicktime>=1000)
{
clicktime=1000;
}
if(form.get_current_focus()!=betChoice and form.get_current_focus()!=betInput and form.get_current_focus()!=symbolChoices)
{
slots_game_input();
}
        if (key_pressed(KEY_ESCAPE))
        {
pool.destroy_sound(gameslot);
            mingamsmenu();
        }
        if (form.is_pressed(spinButton))
        {
            selectedBet = form.get_list_position(betChoice);
string betStr = form.get_text(betInput);
betAmount = string_to_number(betStr);
    if (betAmount <= 0)
    {
        dlg_buffer("Invalid bet amount. Please enter a valid number! Press enter or space to continue.");
form.reset();
slotsgame();
    }
            if ((selectedBet == 0 && cookies < betAmount) || (selectedBet == 1 && coins < betAmount) || (selectedBet == 2 && autocooky < betAmount) || (selectedBet == 3 && cookyspeed < betAmount) || (selectedBet == 4 && manulcooky < betAmount))
            {
                dlg_buffer("You don't have enough of that item to bet! Press enter or space to continue.");
form.reset();
slotsgame();
            }
            string[] activeSymbols;
            for (uint i = 0; i < symbols.length(); i++)
{
                if (form.is_list_item_checked(symbolChoices, i))
{ 
                    activeSymbols.insert_last(symbols[i]); 
                }
            }
            if (activeSymbols.length()<10)
{
                dlg_buffer("You must select at least 10 symbols in order to spin! Press enter or space to continue.");
form.reset();
slotsgame();
            }
pool.destroy_sound(machineslot);
pool.play_stationary("slotbet1.ogg", false);
if(selectedBet==0) speak_buffer("You placed a bet of " + format_number(betAmount) + " items on cookies.");
if(selectedBet==1) speak_buffer("You placed a bet of " + format_number(betAmount) + " items on coins.");
if(selectedBet==2) speak_buffer("You placed a bet of " + format_number(betAmount) + " items on auto cookies.");
if(selectedBet==3) speak_buffer("You placed a bet of " + format_number(betAmount) + " items on auto cooky speeds.");
if(selectedBet==4) speak_buffer("You placed a bet of " + format_number(betAmount) + " items on manual cookies.");
wait_async(1000);
pool.play_stationary("slotbet2.ogg", false);
wait_async(random(600, 800));
pool.play_stationary("slotbet3.ogg", false);
wait_async(1000);
pool.play_stationary("slotlever.ogg", false);
machineslot=pool.play_stationary("slotspin.ogg", true);
if(slotmode==true) speak_buffer("spinning...");
if(slotmode==false) dlg_buffer("spinning. Press enter or space to stop each reel.");
if(slotmode==true) wait(random(1000,2000));
            for (uint i = 0; i < 5; i++)
            {
                if (i == 0) 
                {
            reel1 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotstop1.ogg", false);
if(slotmode==true) speak_buffer(reel1);
else if(slotmode==false) dlg_buffer("The first reel shows " + reel1);
                }
                else if (i == 1) 
                {
            reel2 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait_async(random(1000, 2000));
pool.play_stationary("slotstop2.ogg", false);
if(slotmode==true) speak_buffer(reel2);
else if(slotmode==false) dlg_buffer("The second reel shows " + reel2);
                }
                else if (i == 2) 
                {
            reel3 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait_async(random(1000, 2000));
pool.play_stationary("slotstop3.ogg", false);
if(slotmode==true) speak_buffer(reel3);
else if(slotmode==false) dlg_buffer("The third reel shows " + reel3);
                }
                else if (i == 3) 
                {
            reel4 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait_async(random(1000, 2000));
pool.play_stationary("slotstop1.ogg", false);
if(slotmode==true) speak_buffer(reel4);
else if(slotmode==false) dlg_buffer("The forth reel shows " + reel4);
                }
                else if (i == 4) 
                {
            reel5 = activeSymbols[random(0, activeSymbols.length() - 1)];
if(slotmode==true) wait_async(random(1000, 2000));
pool.play_stationary("slotstop2.ogg", false);
if(slotmode==true) speak_buffer(reel5);
else if(slotmode==false) dlg_buffer("The fith reel shows " + reel5);
                }
            }
int[] symbolCount(symbols.length());
string[] reels = {reel1, reel2, reel3, reel4, reel5};
for (uint i = 0; i < reels.length(); i++)
{
    for (uint j = 0; j < symbols.length(); j++)
    {
        if (reels[i] == symbols[j])
        {
            symbolCount[j]++;
        }
    }
}
int maxMatch = 0;
for (uint i = 0; i < symbolCount.length(); i++)
{
    if (symbolCount[i] > maxMatch)
    {
        maxMatch = symbolCount[i];
    }
}
if (maxMatch == 5)
{
            if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
                pool.play_stationary("slotwin1.ogg", false);
                dlg_buffer("You won 4 times your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*4;
}
                else if (selectedBet == 1)
{
coins += betAmount*4;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*4;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*4;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*4;
}
            }
else if (maxMatch == 4)
            {
if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin1.ogg", false);
                dlg_buffer("You won triple your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*3;
}
                else if (selectedBet == 1)
{
coins += betAmount*3;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*3;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*3;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*3;
}
            }
else if (maxMatch == 3)
            {
if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin2.ogg", false);
                dlg_buffer("You won double your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount*2;
}
                else if (selectedBet == 1)
{
coins += betAmount*2;
}
                else if (selectedBet == 2)
{
autocooky += betAmount*2;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount*2;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount*2;
}
            }
else if (maxMatch == 2)
            {
if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
pool.play_stationary("slotwin3.ogg", false);
                dlg_buffer("You won half your bet!");
form.focus(spinButton);
                if (selectedBet == 0)
{
cookies += betAmount/2;
}
                else if (selectedBet == 1)
{
coins += betAmount/2;
}
                else if (selectedBet == 2)
{
autocooky += betAmount/2;
}
                else if (selectedBet == 3)
{
cookyspeed += betAmount/2;
clicktime-=cookyspeed;
}
                else if (selectedBet == 4)
{
manulcooky += betAmount/2;
}
            }
            else
            {
if(slotmode==true) wait_async(random(1000, 2000));
pool.destroy_sound(machineslot);
                pool.play_stationary("slotlose.ogg", false);
                dlg_buffer("You lost the bet!");
form.focus(spinButton);
            if (selectedBet == 0)
{
cookies -= betAmount;
}
            else if (selectedBet == 1)
{
coins -= betAmount;
}
            else if (selectedBet == 2)
{
autocooky -= betAmount;
}
            else if (selectedBet == 3)
{
cookyspeed -= betAmount;
clicktime+=cookyspeed;
}
            else if (selectedBet == 4)
{
manulcooky -= betAmount;
}
            }
        }
}
    }
